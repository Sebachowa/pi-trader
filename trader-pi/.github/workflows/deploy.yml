name: Deploy to Raspberry Pi

on:
  push:
    branches:
      - main
      - deploy
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - test

env:
  SERVICE_NAME: trader
  DEPLOY_PATH: /home/pi/trader-bot

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-pi.txt') }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-pi.txt
          pip install pytest pytest-asyncio
          
      - name: Run tests
        run: |
          python -m pytest tests/ -v || echo "No tests yet"
          
      - name: Check code quality
        run: |
          pip install flake8
          flake8 . --max-line-length=120 --exclude=venv,__pycache__ || true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Create deployment package
        run: |
          tar -czf trader-bot.tar.gz \
            --exclude='*.pyc' \
            --exclude='__pycache__' \
            --exclude='.git' \
            --exclude='venv' \
            --exclude='logs' \
            --exclude='data/*.db' \
            .
            
      - name: Deploy to Raspberry Pi
        uses: appleboy/ssh-action@v0.1.5
        env:
          DEPLOY_PATH: ${{ env.DEPLOY_PATH }}
        with:
          host: ${{ secrets.PI_HOST }}
          username: ${{ secrets.PI_USER }}
          key: ${{ secrets.PI_SSH_KEY }}
          port: ${{ secrets.PI_PORT }}
          envs: DEPLOY_PATH,SERVICE_NAME
          script: |
            # Create backup of current version
            if [ -d "$DEPLOY_PATH" ]; then
              echo "Creating backup..."
              sudo systemctl stop $SERVICE_NAME || true
              cp -r $DEPLOY_PATH ${DEPLOY_PATH}_backup_$(date +%Y%m%d_%H%M%S)
              # Keep only last 3 backups
              ls -t ${DEPLOY_PATH}_backup_* | tail -n +4 | xargs rm -rf || true
            fi
            
            # Ensure directory exists
            mkdir -p $DEPLOY_PATH
            cd $DEPLOY_PATH
            
      - name: Copy files to Raspberry Pi
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.PI_HOST }}
          username: ${{ secrets.PI_USER }}
          key: ${{ secrets.PI_SSH_KEY }}
          port: ${{ secrets.PI_PORT }}
          source: "trader-bot.tar.gz"
          target: "/tmp/"
          
      - name: Extract and setup on Raspberry Pi
        uses: appleboy/ssh-action@v0.1.5
        env:
          DEPLOY_PATH: ${{ env.DEPLOY_PATH }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
          CONFIG_JSON: ${{ secrets.CONFIG_JSON }}
        with:
          host: ${{ secrets.PI_HOST }}
          username: ${{ secrets.PI_USER }}
          key: ${{ secrets.PI_SSH_KEY }}
          port: ${{ secrets.PI_PORT }}
          envs: DEPLOY_PATH,SERVICE_NAME,CONFIG_JSON
          script: |
            # Extract files
            cd $DEPLOY_PATH
            tar -xzf /tmp/trader-bot.tar.gz
            rm /tmp/trader-bot.tar.gz
            
            # Create virtual environment if doesn't exist
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            
            # Install/update dependencies
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements-pi.txt
            
            # Update configuration from secrets
            if [ ! -z "$CONFIG_JSON" ]; then
              echo "$CONFIG_JSON" > config/config.json
            fi
            
            # Update systemd service
            sudo cp trader.service /etc/systemd/system/
            sudo systemctl daemon-reload
            
            # Start service
            sudo systemctl enable $SERVICE_NAME
            sudo systemctl restart $SERVICE_NAME
            
            # Wait for service to start
            sleep 5
            
            # Check if service is running
            if sudo systemctl is-active --quiet $SERVICE_NAME; then
              echo "✅ Service started successfully"
            else
              echo "❌ Service failed to start"
              sudo journalctl -u $SERVICE_NAME -n 50
              exit 1
            fi
            
      - name: Health check
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.PI_HOST }}
          username: ${{ secrets.PI_USER }}
          key: ${{ secrets.PI_SSH_KEY }}
          port: ${{ secrets.PI_PORT }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            # Run health check
            python3 scripts/health_check.py || exit 1
            
      - name: Send success notification
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ✅ Deployment Successful!
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Deployed to: ${{ secrets.PI_HOST }}
            
            View logs: ssh ${{ secrets.PI_USER }}@${{ secrets.PI_HOST }} "journalctl -u trader -f"
            
      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.PI_HOST }}
          username: ${{ secrets.PI_USER }}
          key: ${{ secrets.PI_SSH_KEY }}
          port: ${{ secrets.PI_PORT }}
          script: |
            echo "⚠️ Deployment failed, rolling back..."
            LATEST_BACKUP=$(ls -t ${DEPLOY_PATH}_backup_* 2>/dev/null | head -1)
            if [ ! -z "$LATEST_BACKUP" ]; then
              sudo systemctl stop $SERVICE_NAME || true
              rm -rf $DEPLOY_PATH
              mv $LATEST_BACKUP $DEPLOY_PATH
              sudo systemctl start $SERVICE_NAME
              echo "✅ Rollback completed"
            else
              echo "❌ No backup found for rollback"
            fi
            
      - name: Send failure notification
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ❌ Deployment Failed!
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            
            Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}